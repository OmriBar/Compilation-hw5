%{
	#include "attributes.h"
    #include "SymbolTable.h"
    #include "SemanticActions.h"
    #include "output.hpp"
    #include "RegManagment.h"
    #include "bp.hpp"

	#include <iostream>
	#include <stdlib.h>
	using namespace std;

	extern int yylex();
    extern int yylineno;
	extern int yyerror(char const*);

    int currentOffset;

    SymbolTable globalSymbolTable;

    RegManagment regManagment;

    CodeBuffer& codeBuffer = CodeBuffer::instance();

    int in_while_flag;
    bool main_flag = false;
%}

%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%left AND
%left OR
%right NOT
%token TRUE
%token FALSE
%token RETURN
%token IF

%nonassoc "then"
%nonassoc ELSE

%token WHILE
%token BREAK
%token CONTINUE
%token PRECOND
%token SC
%token COMMA
%right LPAREN RPAREN
%right LBRACE RBRACE
%left ASSIGN
%nonassoc  RELOP
%left  BINOP
%token ID
%token NUM
%token STRING
%token COMMENT
%token ENDFILE


%%

Program  : 
    Funcs ENDFILE {mainCheck(globalSymbolTable); CallToExitGlobalScope(globalSymbolTable); return 0;}
;
Funcs : 
    /*epsilon*/ | FuncDecl Funcs | COMMENT Funcs
;
FuncDecl :
    RetType ID  
                {CallToEnterFunctionScope(globalSymbolTable);}
    LPAREN
        Formals 
    RPAREN 
        PreConditions 
                {addFunction(globalSymbolTable,$1,$2,$3,$4,$5,$6,$7,codeBuffer);}
      LBRACE
        Statements 
      RBRACE 
                {CallToExitFunctionScope(globalSymbolTable,codeBuffer);}
;


RetType : 
    Type {$$ = RetTypeAction1($1);} | 
    VOID {$$ = RetTypeAction2();}
;
Formals : 
    /*epsilon*/ { $$ = FormalsAction1();}                                        | 
    FormalsList { $$ = FormalsAction2($1);}
;
FormalsList : 
    FormalDecl {$$ = FormalsListAction1($1);} | FormalDecl COMMA FormalsList {$$ = FormalsListAction2($1,$2,$3);}
;
FormalDecl : 
    Type ID { $$ = FormalDeclAction1(globalSymbolTable,$1,$2); }
;
PreConditions : 
    /*epsilon*/                { $$ = PreConditionsAction1();}                   |
    PreConditions PreCondition { $$ = PreConditionsAction2($1,$2);} 
;
PreCondition : 
	PRECOND LPAREN Exp RPAREN { PreConditionAction1($1,$2,$3,$4);}
;
Statements : 
    Statement | Statements Statement // dont need to do anything right now
;
Statement : 
    COMMENT                                                                                                                                                         |
    LBRACE {CallToEnterInnerScope(globalSymbolTable);} Statements {CallToExitInnerScope(globalSymbolTable);} RBRACE { $$ = StatmentAction1($1);}                    | 
    Type ID SC               {$$ = StatmentAction2(globalSymbolTable,$1,$2,$3,regManagment,codeBuffer);}                                                                 | 
    Type ID ASSIGN Exp SC    {$$ = StatmentAction3(globalSymbolTable ,$1,$2,$3,$4,$5,regManagment,codeBuffer);}                                                          | 
    ID ASSIGN Exp SC         {$$ = StatmentAction4(globalSymbolTable,$1,$2,$3,$4,regManagment,codeBuffer);}                                                              | 
    IF_SUFFIX  %prec "then"  {$$ = StatmentAction5(globalSymbolTable,$1,regManagment,codeBuffer);}                                                                                                                                   |
    IF_SUFFIX ELSE {CallToEnterInnerScope(globalSymbolTable);} M Statement {CallToExitInnerScope(globalSymbolTable);}         
                             {$$ = StatmentAction6($1,$2,$3,$4,$5,regManagment,codeBuffer);}                                                                                                     |
    WHILE LPAREN {CallToEnterInnerScope(globalSymbolTable); EnterWhile(in_while_flag);} M Exp {checkIfBoolInWhileIf($4);} RPAREN M Statement 
             {CallToExitInnerScope(globalSymbolTable);ExitWhile(in_while_flag);
             StatmentAction7($1,$2,$3,$4,$5,$6,$7,$8,$9,regManagment,codeBuffer);}                                                     |
    BREAK SC                 {StatmentAction8(in_while_flag);}                                                                                                      |
    CONTINUE SC              {StatmentAction9(in_while_flag);}                                                                                                      |
    RETURN SC                {StatmentAction10(globalSymbolTable, codeBuffer);}                                                                                                  |
    RETURN Exp SC            {StatmentAction11(globalSymbolTable,$1,$2,regManagment,codeBuffer);}                                                                                           |
    Call SC                  {StatmentAction12();}
;

IF_SUFFIX : IF LPAREN {CallToEnterInnerScope(globalSymbolTable);} Exp {checkIfBoolInWhileIf($4);} RPAREN M Statement 
    {CallToExitInnerScope(globalSymbolTable); $$=IfActionAction($4,$7);} // solves a reduce-reduce conflict!
;

Call : 
    ID LPAREN ExpList RPAREN { $$ = CallAction1(globalSymbolTable,$1,$2,$3,$4,regManagment,codeBuffer); }                                |
    ID LPAREN RPAREN         { $$ = CallAction2(globalSymbolTable,$1,$2,$3,regManagment,codeBuffer);    }
;
ExpList :
    Exp COMMA ExpList { $$ = ExpListAction1($1,$2,$3);}                        | 
    Exp               { $$ = ExpListAction2($1);}
;
Type :
    INT     { $$ = TypeAction1();}  |
    BYTE    { $$ = TypeAction2(); } |
    BOOL    { $$ = TypeAction3(); }
;
Exp : 
    LPAREN Exp RPAREN   { $$ = ExpAction1($1,$2,$3,regManagment,codeBuffer);}                    |
    Exp BINOP Exp       { $$ = ExpAction2($1,$2,$3,regManagment,codeBuffer);}                    |
    ID                  { $$ = ExpAction3(globalSymbolTable,$1,regManagment,codeBuffer);}        |
    Call                { $$ = ExpAction4($1,regManagment,codeBuffer); }                         |  
    NUM                 { $$ = ExpAction5($1,regManagment,codeBuffer); }                         |
    NUM B               { $$ = ExpAction6($1,$2,regManagment,codeBuffer); }                      |
    STRING              { $$ = ExpAction7($1,regManagment,codeBuffer); }                         |
    TRUE                { $$ = ExpAction8(regManagment,codeBuffer); }                            |
    FALSE               { $$ = ExpAction9(regManagment,codeBuffer); }                            |
	Exp AND M Exp         { $$ = ExpAction10($1,$2,$3,regManagment,codeBuffer); }                |
    Exp OR M Exp          { $$ = ExpAction11($1,$2,$3,regManagment,codeBuffer); }                |
    Exp RELOP Exp       { $$ = ExpAction12($1,$2,$3,regManagment,codeBuffer); }                  |
    NOT Exp             { $$ = ExpAction13($1,$2,regManagment,codeBuffer); } 

M :
  { $$ = MMarkerAction(codeBuffer); }
    
;

%%

int main()
{
    currentOffset = 0;
    globalSymbolTable = SymbolTable();
    regManagment = RegManagment();
    in_while_flag = 0;
    codeBuffer.emit(".globl main");
    AddFuncPrintPrintiToBuffer(codeBuffer);
	if(yyparse() != 0){
        if(!(globalSymbolTable.IsMainExists())){
            output::errorMainMissing();
        }
    }
    codeBuffer.printDataBuffer();
	codeBuffer.printCodeBuffer();

}

